## Scalaによるパーサの実装で目指しているもの

- いまのメンテしづらい main.pl を廃止して、サブコマンドの追加などのメンテをしやすい設計
- Scala Native または GraalVM の native-image により main.pl での実装と同じぐらいの高速起動
- 賢いシェル補完 (引数をパースしたうえで次に来るべきパラメータの種類を判別しての補完)
- 賢いヘルプ表示 (入力途中の引数列の最後に --help を付ければその時点で必要とするヘルプを表示)
- 複雑な構文解析に対応 (例 $ xsvutils a.tsv diff b.tsv cut title)


## いまのところの main.pl との仕様の違い

コマンドのパラメータを書ける場所に次のコマンド名を書いた場合に、従来は仕様では
それがパラメータなのかコマンド名なのかの区別ができないものとしてエラーとなっていたが、
新しい仕様ではコマンド名と解釈する。コマンド名と同じ名前のファイルが偶然存在していたとしても
コマンド名を優先する。実行環境による解釈の揺れを少しでも減らすためである。

標準出力が端末の場合 --o-csv などを指定しても、従来はtableフォーマットでのlessで表示だったが、
新しい仕様ではcsvフォーマットでのlessでの表示になる。


## Scalaによるパーサへのリプレイス手順

- 9月リリース目標
    - --jvm, --install-rt を廃止
    - build-makefile.sh 整理 (ソースファイル一覧の仕組み)
- 10月リリース目標
    - src ディレクトリにScalaパーサのソースを追加、 main.pl に --jvm 復活
    - --jvm でのサポートは試験的にごく一部のみ
- 11月以降
    - --jvm をデフォルトに変更


## 依存しているもの

- mkfifo
- test
- tput
- cat
- tail
- iconv
- gunzip
- xz
- perl
- less
    - 結果またはヘルプの端末への出力
- git
    - 過去バージョンのビルドのため
- make
    - 最新バージョンおよび過去バージョンのビルドのため
- curl
    - 最新バージョンおよび過去バージョンのビルドのため


## 実装のメモ

- CommandSeqParserStatus
    - CommandPipeNode
    - CommandParserStatus
- CommandNodeSeq
    - CommandPipeNode
- IndexedSeq[Graph.Node[CommandGraphNode]]
    - CommandGraphNode
- ProcessBuilder
    - ProcessBuildingTask

## メモ

実行例

    $ ./run.sh ../test/data/sample-3.tsv

補完

    $ . ./completion.zsh
    $ ./run.sh ../test/data/sample-3.tsv [TAB]

