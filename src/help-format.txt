Input and Output format:

    入出力ファイルフォーマットは以下の3種類が可能。

    tsv format
        タブ(U+0009)区切りのファイル。
        データ自体には改行やタブなどのコントロール文字を含めることができない。
        入力はオプション指定していなくてもこの形式を自動で認識する。
        出力は出力先が端末でない場合のデフォルトはこの形式。

        オプションでの形式指定
            入力: --tsv
            出力: --o-tsv

    csv format
        コンマ(,)区切りのファイル。
        入力はオプション指定していなくてもこの形式を自動で認識する。

        オプションでの形式指定
            入力: --csv
            出力: --o-csv

    ltsv format
        LTSVファイル。
        入力のみ可能。

        オプションでの形式指定
            入力: --ltsv <HEADERS>
                  <HEADERS> はコンマ区切りの項目名のリスト

    table format
        固定長テキストのファイル。
        出力のみ可能。
        出力先が端末である場合のデフォルトはこの形式。
        各セルに入っている値が長すぎる場合は、列幅を維持するために途中から省略してしまうが、
        最後の列に限ってはすべてを表示する。

        オプションでの形式指定
            出力: --o-table

    diffable format
        diffable なテキストのファイル。
        出力のみ可能。

        オプションでの形式指定
            出力: --o-diffable

    chart format
        HTMLでのチャートの形式。
        出力のみ可能。

        オプションでの形式指定
            出力: --o-chart
            または
            出力: --o-chart2

    入力フォーマットはTSV/CSVを自動判別するが、自動判別させたくない場合は
    --tsv, --csv, --ltsv いずれかのオプションを使う。

    出力フォーマットは出力先が端末の場合はtable形式、そうでない場合はTSV形式になる。

    LTSVファイルでは1行に同じ名前のラベルが複数あった場合は後のほうが優先される。

    diffable な出力形式で実際に diff を取るには、2つのファイルのカラムの順番やレコードの順番が
    合っている必要がある。

    Character encoding:
        入力の文字コードは UTF-8 が原則。ただし SHIFT-JIS は自動判別して変換する。
        オプションによる文字コード指定は未実装。
        SHIFT-JIS は内部でiconvコマンドを使用しており、巨大な入力の場合はメモリ消費に問題あり。

    改行コード:
        LF, CRLF, CR をサポートする。
        改行コードの種類が混ざっている場合は実装依存で、将来の互換性を保証しない。

    圧縮ファイル:
        入力に関しては gz または xz で圧縮されたファイルをサポートする。圧縮されているかどうかは自動判別する。

HTMLでのチャート形式の出力について:

    --o-chart:

        以下のライブラリを使ってチャートを出力する。
        Chart.js
        https://www.chartjs.org

    --o-chart2:

        以下のライブラリを使ってチャートを出力する。
        amCharts
        https://www.amcharts.com

        横軸は1列目を使用し、縦軸は2列目以降を使用する。
        縦軸は複数保持することができる。
        横軸は日時で

            2019-07-05T06:56:02Z

        のようなフォーマットであることが前提。
        Javaでいうと以下のフォーマット。

            java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ssX")


